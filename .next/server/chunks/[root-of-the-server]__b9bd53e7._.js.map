{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/db/schema.ts"],"sourcesContent":["import { pgTable, text, integer, boolean, timestamp, uuid, decimal } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const tourOperators = pgTable(\"tour_operators\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  phone: text(\"phone\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const tours = pgTable(\"tours\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull(),\n  time: text(\"time\").notNull(),\n  rate: decimal(\"rate\", { precision: 10, scale: 2 }).notNull(),\n  type: text(\"type\").notNull(),\n  destinations: text(\"destinations\").notNull(),\n  inclusions: text(\"inclusions\").notNull(),\n  imageUrl: text(\"image_url\"),\n  images: text(\"images\").array(),\n  featured: boolean(\"featured\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const expeditions = pgTable(\"expeditions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  duration: text(\"duration\").notNull(),\n  difficulty: text(\"difficulty\").notNull(),\n  rate: decimal(\"rate\", { precision: 10, scale: 2 }).notNull(),\n  maxParticipants: integer(\"max_participants\").notNull(),\n  inclusions: text(\"inclusions\").notNull(),\n  imageUrl: text(\"image_url\"),\n  featured: boolean(\"featured\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  tourId: uuid(\"tour_id\"),\n  expeditionId: uuid(\"expedition_id\"),\n  bookingType: text(\"booking_type\").notNull(),\n  date: text(\"date\").notNull(),\n  guests: integer(\"guests\").notNull(),\n  message: text(\"message\"),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  sessionId: text(\"session_id\").notNull(),\n  senderType: text(\"sender_type\").notNull(),\n  senderName: text(\"sender_name\").notNull(),\n  message: text(\"message\").notNull(),\n  operatorId: uuid(\"operator_id\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: text(\"id\").primaryKey(),\n  guestName: text(\"guest_name\"),\n  guestEmail: text(\"guest_email\"),\n  status: text(\"status\").notNull().default(\"active\"),\n  lastMessageAt: timestamp(\"last_message_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const tourOperatorsRelations = relations(tourOperators, ({ many }) => ({\n  chatMessages: many(chatMessages),\n}));\n\nexport const toursRelations = relations(tours, ({ many }) => ({\n  bookings: many(bookings),\n}));\n\nexport const expeditionsRelations = relations(expeditions, ({ many }) => ({\n  bookings: many(bookings),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  tour: one(tours, {\n    fields: [bookings.tourId],\n    references: [tours.id],\n  }),\n  expedition: one(expeditions, {\n    fields: [bookings.expeditionId],\n    references: [expeditions.id],\n  }),\n}));\n\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  operator: one(tourOperators, {\n    fields: [chatMessages.operatorId],\n    references: [tourOperators.id],\n  }),\n  session: one(chatSessions, {\n    fields: [chatMessages.sessionId],\n    references: [chatSessions.id],\n  }),\n}));\n\nexport const chatSessionsRelations = relations(chatSessions, ({ many }) => ({\n  messages: many(chatMessages),\n}));\n\nexport const insertTourOperatorSchema = createInsertSchema(tourOperators).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const selectTourOperatorSchema = createSelectSchema(tourOperators);\n\nexport const insertTourSchema = createInsertSchema(tours).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const selectTourSchema = createSelectSchema(tours);\n\nexport const insertExpeditionSchema = createInsertSchema(expeditions).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const selectExpeditionSchema = createSelectSchema(expeditions);\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({ \n  id: true, \n  createdAt: true,\n  status: true\n});\n\nexport const selectBookingSchema = createSelectSchema(bookings);\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const selectChatMessageSchema = createSelectSchema(chatMessages);\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).omit({ \n  createdAt: true,\n  lastMessageAt: true,\n  status: true\n});\n\nexport const selectChatSessionSchema = createSelectSchema(chatSessions);\n\nexport type TourOperator = typeof tourOperators.$inferSelect;\nexport type InsertTourOperator = z.infer<typeof insertTourOperatorSchema>;\n\nexport type Tour = typeof tours.$inferSelect;\nexport type InsertTour = z.infer<typeof insertTourSchema>;\n\nexport type Expedition = typeof expeditions.$inferSelect;\nexport type InsertExpedition = z.infer<typeof insertExpeditionSchema>;\n\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\nexport type ChatSession = typeof chatSessions.$inferSelect;\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type Login = z.infer<typeof loginSchema>;\n\nexport const bookingFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  tourId: z.string().optional(),\n  expeditionId: z.string().optional(),\n  bookingType: z.enum([\"tour\", \"expedition\"]),\n  date: z.string().min(1, \"Please select a date\"),\n  guests: z.number().min(1, \"At least 1 guest required\").max(50, \"Maximum 50 guests\"),\n  message: z.string().optional(),\n});\n\nexport type BookingForm = z.infer<typeof bookingFormSchema>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/db.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { Pool, neonConfig } from \"@neondatabase/serverless\";\nimport ws from \"ws\";\nimport * as schema from \"@/db/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is not set\");\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,sKAAU,CAAC,oBAAoB,GAAG,2JAAE;AAEpC,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,OAAO,IAAI,gKAAI,CAAC;IAAE,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAAC;AAC5D,MAAM,KAAK,IAAA,2KAAO,EAAC;IAAE,QAAQ;IAAM,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/tours/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { tours } from \"@/db/schema\";\n\nexport async function GET() {\n  try {\n    const allTours = await db.select().from(tours);\n    return NextResponse.json(allTours);\n  } catch (error) {\n    console.error(\"Error fetching tours:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch tours\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,iHAAE,CAAC,MAAM,GAAG,IAAI,CAAC,uHAAK;QAC7C,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}